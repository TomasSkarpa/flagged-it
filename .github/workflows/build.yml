name: Build Fyne App

# Trigger on push to tags (for releases) or manual workflow dispatch
on:
  push:
    tags:
      - 'v*.*.*'  # Trigger only on version tags like v1.0.0
  workflow_dispatch:

jobs:
  build:
    # Run each OS separately
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
          - os: windows-latest
            arch: amd64
          - os: macos-latest
            arch: amd64
          - os: macos-latest
            arch: arm64

    steps:
      # 1. Checkout repo
      - uses: actions/checkout@v4

      # 2. Setup Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # 3. Install dependencies
      - name: Install dependencies
        run: go mod tidy

      # 4. Install platform dependencies
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev xorg-dev
      
      - name: Setup Windows C compiler
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      # 5. Build
      - name: Build binary (Windows)
        if: matrix.os == 'windows-latest'
        env:
          CGO_ENABLED: 1
        run: |
          mkdir build
          go build -ldflags="-H=windowsgui" -o build/flagged-it-windows-amd64.exe ./cmd
      
      - name: Build binary (macOS)
        if: matrix.os == 'macos-latest'
        env:
          CGO_ENABLED: 1
          GOARCH: ${{ matrix.arch }}
        run: |
          mkdir -p build
          go build -o build/flagged-it-darwin-${{ matrix.arch }} ./cmd
          # Remove quarantine attribute to prevent Gatekeeper issues
          xattr -cr build/flagged-it-darwin-${{ matrix.arch }} || true
      
      - name: Build binary (Linux)
        if: matrix.os == 'ubuntu-latest'
        env:
          CGO_ENABLED: 1
        run: |
          mkdir -p build
          go build -o build/flagged-it-linux-amd64 ./cmd

      # 6. Archive
      - name: Archive binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd build
          Compress-Archive -Path flagged-it-windows-amd64.exe -DestinationPath flagged-it-windows-amd64.zip
      
      - name: Archive binary (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd build
          tar -czf flagged-it-darwin-${{ matrix.arch }}.tar.gz flagged-it-darwin-${{ matrix.arch }}
      
      - name: Archive binary (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd build
          tar -czf flagged-it-linux-amd64.tar.gz flagged-it-linux-amd64

      # 7. Upload artifact to Actions (optional for testing)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: flagged-it-${{ matrix.os }}-${{ matrix.arch }}
          path: build/*
